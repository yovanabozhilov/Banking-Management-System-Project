@model BankingManagmentApp.Models.Accounts
@using BankingManagmentApp.Utilities

@{
    ViewData["Title"] = "Block Account";
    ViewData["BodyClass"] = "profile-full-bg";
}
<link rel="stylesheet" href="~/css/profile.css" asp-append-version="true" />

@functions{
    string ShortId(string id)
    {
        if (string.IsNullOrEmpty(id)) return "-";
        return id.Length <= 12 ? id : id.Substring(0, 8) + "â€¦" + id[^4..];
    }
}

<div class="profile-page">
    <div class="container-xxl">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-6 col-xl-5">
                <div class="profile-card card shadow-lg border-0">
                    <div class="profile-header d-flex align-items-center gap-3 p-4 border-bottom">
                        <div class="profile-badge">
                            <i class="fa-solid fa-ban"></i>
                        </div>
                        <div>
                            <h3 class="mb-0">@ViewData["Title"]</h3>
                            <small class="opacity-75">Are you sure you want to block this account?</small>
                        </div>
                    </div>

                    <div class="card-body p-4 p-md-5">
                        <dl class="row mb-4">
                            <dt class="col-sm-4">IBAN</dt>
                            <dd class="col-sm-8 text-mono">
                                @if (!string.IsNullOrEmpty(Model?.IBAN))
                                {
                                    <span title="@Model.IBAN">@Model.IBAN.MaskIban()</span>
                                    <button type="button"
                                            class="btn btn-link p-0 ms-1 align-baseline copy-id-btn"
                                            data-copy-iban="@Model.IBAN"
                                            title="Copy IBAN" aria-label="Copy IBAN">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                }
                                else { <span class="text-muted">-</span> }
                            </dd>

                            <dt class="col-sm-4">Account Type</dt>
                            <dd class="col-sm-8">@Html.DisplayFor(model => model.AccountType)</dd>

                            <dt class="col-sm-4">Balance</dt>
                            <dd class="col-sm-8 text-mono">@Html.DisplayFor(model => model.Balance)</dd>

                            <dt class="col-sm-4">Currency</dt>
                            <dd class="col-sm-8">@Html.DisplayFor(model => model.Currency)</dd>

                            <dt class="col-sm-4">Created At</dt>
                            <dd class="col-sm-8">@Html.DisplayFor(model => model.CreateAt)</dd>

                            <dt class="col-sm-4">Status</dt>
                            <dd class="col-sm-8">@Html.DisplayFor(model => model.Status)</dd>

                            <dt class="col-sm-4">Client</dt>
                            <dd class="col-sm-8">
                                @(Model?.Customer is null
                                    ? "-"
                                    : $"{Model.Customer.FirstName} {Model.Customer.LastName}")
                            </dd>

                            <dt class="col-sm-4">Client ID</dt>
                            <dd class="col-sm-8 text-mono">
                                @if (!string.IsNullOrEmpty(Model?.CustomerId))
                                {
                                    <span title="@Model.CustomerId">@ShortId(Model.CustomerId)</span>
                                    <button type="button"
                                            class="btn btn-link p-0 ms-1 align-baseline copy-id-btn"
                                            data-copy-id="@Model.CustomerId"
                                            title="Copy Client ID" aria-label="Copy Client ID">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                }
                                else { <span class="text-muted">-</span> }
                            </dd>
                        </dl>

                        <div class="d-flex gap-2">
                            <form asp-action="Delete" class="flex-fill" id="blockForm" method="post">
                                <input type="hidden" asp-for="Id" />
                                <button type="button" id="confirmBlockBtn" class="btn btn-danger w-100">
                                    <i class="fa-solid fa-ban me-1"></i> Block
                                </button>
                            </form>
                            <a asp-action="Index" class="btn btn-outline-secondary flex-fill">
                                <i class="fa-solid fa-arrow-left me-1"></i> Back to List
                            </a>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('click', function (e) {
            const btn = e.target.closest('[data-copy],[data-copy-iban],[data-copy-id]');
            if (!btn) return;

            const text = btn.getAttribute('data-copy')
                ?? btn.getAttribute('data-copy-iban')
                ?? btn.getAttribute('data-copy-id')
                ?? '';
            if (!text) return;

            const originalHtml = btn.innerHTML;

            function showCopied() {
                btn.innerHTML = '<i class="fa-solid fa-check"></i>';
                btn.classList.add('text-success');
                setTimeout(() => {
                    btn.innerHTML = originalHtml;
                    btn.classList.remove('text-success');
                }, 1200);
            }

            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text).then(showCopied).catch(fallbackCopy);
            } else {
                fallbackCopy();
            }

            function fallbackCopy() {
                const ta = document.createElement('textarea');
                ta.value = text;
                ta.style.position = 'fixed';
                ta.style.opacity = '0';
                document.body.appendChild(ta);
                ta.select();
                try { document.execCommand('copy'); showCopied(); }
                catch (err) { console.warn('Copy failed', err); }
                finally { document.body.removeChild(ta); }
            }
        });

        (function () {
            const btn = document.getElementById('confirmBlockBtn');
            const form = document.getElementById('blockForm');
            if (!btn || !form) return;

            btn.addEventListener('click', function () {
                if (window.Swal) {
                    Swal.fire({
                        title: 'Block this account?',
                        text: 'This will prevent further transactions until it is unblocked.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, block',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((res) => {
                        if (res.isConfirmed) form.submit();
                    });
                } else {
                    if (confirm('Block this account?\nThis will prevent further transactions until it is unblocked.')) {
                        form.submit();
                    }
                }
            });
        })();
    </script>
}
