@using BankingManagmentApp.Models
@using BankingManagmentApp.Services.Forecasting
@{
    ViewData["Title"] = "Forecasting Dashboard";
    ViewData["BodyClass"] = "profile-full-bg";

    var volume = (Dictionary<string, int>)ViewData["TransactionVolume"];
    var avgValue = (decimal)ViewData["AvgTransactionValue"];
    var cashFlows = (Dictionary<string, decimal>)ViewData["CashFlows"];
    var anomalies = (List<Transactions>)ViewData["TransactionAnomalies"];

    var cardExpenses = (decimal)ViewData["CardExpenses"];
    var activeCards = (int)ViewData["ActiveCards"];
    var cardRisk = (double)ViewData["CardDefaultRisk"];

    var overdueRate = (double)ViewData["OverdueLoansRate"];
    var newLoans = (int)ViewData["NewLoans"];
    var repaymentTrend = (string)ViewData["RepaymentTrend"];

    var newCustomers = (int)ViewData["NewCustomers"];
    var churnRate = (double)ViewData["ChurnRate"];

    var volumeLabels = System.Text.Json.JsonSerializer.Serialize(volume.Keys);
    var volumeData = System.Text.Json.JsonSerializer.Serialize(volume.Values);
    var cashLabels = System.Text.Json.JsonSerializer.Serialize(cashFlows.Keys);
    var cashData = System.Text.Json.JsonSerializer.Serialize(cashFlows.Values);
}

@section Head{
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/main-page.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/forecast.css" asp-append-version="true" />
}

<div class="container mx-auto px-4 py-8">
    <h1 class="page-title">
        <span class="text-white">@ViewData["Title"]</span>
    </h1>

    <div class="mb-8">
        <h2 class="section-title text-white"><i class="fas fa-chart-line text-white mr-2"></i> Transaction Insights</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="card p-5">
                <div class="stat-label mb-3">Transaction Volume Forecast (Units)</div>
                <div class="h-64">
                    <canvas id="volumeChart"></canvas>
                </div>
                <div class="mt-4 pt-3 border-t border-gray-200 text-center">
                    <p class="stat-label">Average Transaction Value</p>
                    <div class="stat-value text-indigo-600">@avgValue.ToString("C2", System.Globalization.CultureInfo.GetCultureInfo("bg-BG"))</div>
                </div>
            </div>

            <div class="card p-5">
                <div class="stat-label mb-3">Cash Flow Projections (€)</div>
                <div class="h-64">
                    <canvas id="cashFlowChart"></canvas>
                </div>
                <div class="mt-4 pt-3 border-t border-gray-200 text-center">
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 mr-2">Positive Flow ⬆️</span>
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">Negative Flow ⬇️</span>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-8">
        <h2 class="section-title text-white"><i class="fas fa-credit-card text-white mr-2"></i> Card Portfolio</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">

            <div class="card flex flex-col justify-between">
                <div>
                    <div class="stat-label mb-2">Total Active Cards</div>
                    <div class="stat-value text-blue-600">@activeCards</div>
                    <p class="text-xs text-gray-500 mt-1">Cards used this period</p>
                </div>
                <div class="mt-4 pt-3 border-t border-gray-200">
                    <div class="stat-label mb-1">Monthly Expenses</div>
                    <div class="stat-value text-xl">@cardExpenses.ToString("C2", System.Globalization.CultureInfo.GetCultureInfo("bg-BG"))</div>
                </div>
            </div>

            <div class="card col-span-2 p-5">
                <div class="stat-label mb-3">Card Default Risk Score</div>
                <div class="flex flex-col md:flex-row items-center justify-around h-full pt-4">

                    <div class="gauge-container mb-4 md:mb-0 w-full max-w-sm">
                        <canvas id="cardRiskGauge"></canvas>
                        <div class="gauge-percentage" style="color: #4f46e5;">@Math.Round(cardRisk * 100)%</div>
                    </div>

                    <div class="text-center w-full md:w-auto">
                        <p class="stat-label mb-2">Risk Status</p>
                        <span class="inline-flex items-center px-4 py-2 rounded-lg font-bold text-sm @(cardRisk > 0.1 ? "bg-red-500 text-white" : "bg-green-500 text-white") shadow-md">
                            @(cardRisk > 0.1 ? "Elevated Risk ⚠️" : "Low Risk 👍")
                        </span>
                        <p class="text-xs text-gray-500 mt-2">Default risk forecast</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-8">
        <h2 class="section-title text-white"><i class="fas fa-hand-holding-usd text-white mr-2"></i> Loan Portfolio</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

            <div class="card p-5">
                <div class="stat-label mb-3">Loan Activity: New vs. Overdue</div>
                <div class="h-64">
                    <canvas id="loansChart"></canvas>
                </div>
                <div class="mt-4 pt-3 border-t border-gray-200 text-center">
                    <p class="stat-label">New Loans Issued</p>
                    <div class="stat-value text-green-600">@newLoans</div>
                </div>
            </div>

            <div class="card p-5">
                <div class="stat-label mb-3">Overdue Loans Risk Score</div>
                <div class="flex flex-col items-center justify-around h-full pt-4">

                    <div class="gauge-container w-full max-w-sm">
                        <canvas id="loanRiskGauge"></canvas>
                        <div class="gauge-percentage" style="color: #3B0270;">@Math.Round(overdueRate * 100)%</div>
                    </div>

                    <div class="text-center w-full md:w-auto mt-4">
                        <p class="stat-label mb-2">Repayment Trend</p>
                        <span class="inline-flex items-center px-4 py-2 rounded-lg font-bold text-sm @(repaymentTrend == "Improving" ? "bg-green-500 text-white" : "bg-yellow-500 text-white") shadow-md">
                            @repaymentTrend
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-8">
        <h2 class="section-title text-white"><i class="fas fa-users text-white mr-2"></i> Customer Trends & Security</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

            <div class="card p-5">
                <div class="stat-label mb-3">Customer Acquisition vs. Churn Rate</div>
                <div class="h-64">
                    <canvas id="customersChart"></canvas>
                </div>
                <div class="mt-4 pt-3 border-t border-gray-200 text-center">
                    <p class="stat-label">Customer Churn Rate Forecast</p>
                    <div class="stat-value text-red-600">@Math.Round(churnRate * 100)%</div>
                </div>
            </div>

            <div class="card p-5">
                <div class="stat-label mb-3">Transaction Anomalies Detected</div>
                @if (anomalies != null && anomalies.Any())
                {
                    <ul class="divide-y divide-gray-200">
                        @foreach (var t in anomalies)
                        {
                            <li class="py-3 flex justify-between items-center text-sm">
                                <span class="text-red-500 font-semibold flex items-center">
                                    <i class="fas fa-exclamation-triangle mr-2"></i> @t.Date.ToString("yyyy-MM-dd")
                                </span>
                                <span class="bg-red-100 text-red-800 px-3 py-1 rounded-full font-bold">
                                    @t.Amount.ToString("C2", System.Globalization.CultureInfo.GetCultureInfo("bg-BG"))
                                </span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="bg-green-50 text-green-700 p-4 rounded-lg text-center font-medium mt-10">
                        <i class="fas fa-check-circle mr-2"></i> No significant anomalies detected for this period.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const indigo = '#4f46e5';
        const green = '#10b981';
        const red = '#ef4444';
        const purple = '#a855f7';
        const gray = '#6b7280';
        const blue = '#3B0270';

        const currencyFormatter = new Intl.NumberFormat('bg-BG', {
            style: 'currency',
            currency: 'BGN',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
        });

        new Chart(document.getElementById("volumeChart"), {
            type: 'line',
            data: {
                labels: @Html.Raw(volumeLabels),
                datasets: [{
                    label: 'Volume (Units)',
                    data: @Html.Raw(volumeData),
                    borderColor: indigo,
                    backgroundColor: indigo + '15',
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: indigo,
                    pointRadius: 5
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: (context) => context.dataset.label + ': ' + context.parsed.y.toLocaleString()
                        }
                    }
                },
                scales: { y: { beginAtZero: true } }
            }
        });
        const cashData = @Html.Raw(cashData);
        new Chart(document.getElementById("cashFlowChart"), {
            type: 'bar',
            data: {
                labels: @Html.Raw(cashLabels),
                datasets: [{
                    label: 'Cash Flow (€)',
                    data: cashData,
                    backgroundColor: cashData.map(v => v >= 0 ? indigo : gray),
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: (context) => 'Cash Flow: ' + currencyFormatter.format(context.parsed.y)
                        }
                    }
                },
                scales: { y: { beginAtZero: true } }
            }
        });
        new Chart(document.getElementById("loansChart"), {
            type: 'bar',
            data: {
                labels: ["New Loans (Units)", "Overdue Rate (%)"],
                datasets: [{
                    data: [@newLoans, @Math.Round(overdueRate * 100)],
                    backgroundColor: [indigo, gray],
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: (context) => context.label.includes('%') ? context.parsed.y + '%' : context.parsed.y.toLocaleString() + ' units'
                        }
                    }
                },
                scales: { y: { beginAtZero: true } }
            }
        });
        new Chart(document.getElementById("customersChart"), {
            type: 'pie',
            data: {
                labels: ["New Customers (Units)", "Churn Rate (%)"],
                datasets: [{
                    data: [@newCustomers, @Math.Round(churnRate * 100)],
                    backgroundColor: [indigo, gray],
                    hoverOffset: 10
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: "bottom", labels: { usePointStyle: true, padding: 20 } },
                    tooltip: {
                        callbacks: {
                            label: (context) => context.label.includes('%') ? context.parsed + '%' : context.parsed.toLocaleString() + ' units'
                        }
                    }
                }
            }
        });
        function createGauge(elementId, value, color) {
            new Chart(document.getElementById(elementId), {
                type: 'doughnut',
                data: {
                    datasets: [{
                        data: [value, 100 - value],
                        backgroundColor: [color, '#e5e7eb'],
                        borderWidth: 0
                    }]
                },
                options: {
                    rotation: -90,
                    circumference: 180,
                    cutout: '80%',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: false },
                    },
                    layout: { padding: 0 }
                }
            });
        }

        createGauge("cardRiskGauge", @Math.Round(cardRisk * 100), indigo);
        createGauge("loanRiskGauge", @Math.Round(overdueRate * 100), blue);

    });
</script>
